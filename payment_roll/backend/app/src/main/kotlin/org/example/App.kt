/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import io.ktor.http.HttpStatusCode
import io.ktor.serialization.kotlinx.json.json
import io.ktor.server.application.install
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.plugins.contentnegotiation.ContentNegotiation
import io.ktor.server.plugins.cors.routing.CORS
import io.ktor.server.response.respond
import io.ktor.server.response.respondText
import io.ktor.server.routing.get
import io.ktor.server.routing.routing
import kotlinx.serialization.Serializable
import java.time.LocalDate
import java.util.UUID

@Serializable
data class Employee(
    @Serializable(with = UUIDSerializer::class)
    val id: UUID,
    val name: String,
    val document: String,
    @Serializable(with = LocalDateSerializer::class)
    val birthDate: LocalDate,
    val contracts: MutableList<Contract> = mutableListOf()
) {
    fun addContract(contract: Contract) {
        contracts.add(contract)
    }
}

enum class ContractType { celetista, estagiario, temporario }

@Serializable
data class Contract(
    @Serializable(with = UUIDSerializer::class)
    val id: UUID,
    val matricula: String,
    @Serializable(with = LocalDateSerializer::class)
    val entryDate: LocalDate,
    val contractType: ContractType,
    val position: String,
    val function: String?,
    val department: String,
)

fun main() {
    val db: MutableMap<String, Employee> = mutableMapOf()

    val employee = Employee(
        UUID.fromString("805a852d-61e8-4a07-9e1f-02141ae74e94"),
        "John Doe",
        "123.456.789-00",
        LocalDate.of(1990, 1, 1)
    )

    employee.addContract(
        Contract(
            UUID.fromString("0042d963-6c54-4c9f-a60c-bfcde866d29e"),
            "2025001",
            LocalDate.of(2025, 1, 1),
            ContractType.celetista,
            "Software Engineer",
            "Backend Developer",
            "IT"
        )
    )

    employee.addContract(
        Contract(
            UUID.fromString("97c4b37c-b652-42f5-836e-e279f189e802"),
            "2025002",
            LocalDate.of(2024, 1, 1),
            ContractType.temporario,
            "Project Manager",
            null,
            "Management"
        )
    )

    db.put("805a852d-61e8-4a07-9e1f-02141ae74e94", employee)

    embeddedServer(Netty, port = 8081) {
        install(ContentNegotiation) {
            json()
        }
        install(CORS) {
            anyHost()
        }
        routing {
            get("/employees/{userId}/contracts") {
                val userId = call.parameters["userId"]
                if (userId == null) {
                    call.respondText("User ID is required", status = HttpStatusCode.BadRequest)
                    return@get
                }
                val user = db[userId]
                if (user == null) {
                    call.respondText("User not found", status = HttpStatusCode.NotFound)
                    return@get
                }
                call.respond(user.contracts)
            }
        }
    }.start(wait = true)
}
